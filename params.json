{"name":"Base","tagline":"A Starter Kit for React+Flux and Express+Postgres","body":"\r\n \r\n\r\n## A starter kit for ReactJS, Flux, Express, and Postgres\r\n\r\nForked from some great stuff at https://github.com/kriasoft/react-starter-kit. We are extending this implementation to a full front-end back-end working stack with OAuth2.\r\n\r\nGulp + Webpack + React + Flux + Express + Postgres + Passportjs + Bootstrap + Jade + Mocha + Chai\r\n\r\n![Alt text](https://github.com/adeperio/base/blob/master/logo.png?raw=true \"Base\")\r\n\r\n## Features\r\n\r\n1. OAuth2 Implementation\r\n2. React+Flux Scaffolding\r\n3. WebPack+Gulp Build system\r\n4. Postgres persistent layer\r\n5. NodeJS Express web server\r\n\r\n## Installation\r\n\r\nBase uses Gulp + Webpack as it's build system. To install base for your app:\r\n\r\n```shell\r\n$ git clone https://git@github.com:adeperio/base.git MyApp\r\n$ cd MyApp\r\n$ npm install -g gulp           # Install Gulp task runner globally\r\n$ npm install                   # Install Node.js components listed in ./package.json\r\n```\r\n\r\n### Config\r\n\r\nThere is a config.sample.js file in the src/server directory. Before running the server, create a config.js file from this sample file and enter your OAuth2 sign in credentials from your auth provider (clientID, clientSecret, callbackURL).\r\n\r\n### Database\r\n\r\nYou will also need to ensure that you have a running instance of Postgresql and correctly bootstrapped with the correct database tables. The connection string for the DB should be entered in your config.js file (e.g. postgres://postgres:postgres@localhost:5432/base).\r\n\r\nTo bootstrap the database, simply run:\r\n\r\n```shell\r\n$ gulp bootstrap\r\n```\r\n\r\nTo run the application, run:\r\n\r\n```shell\r\n$ gulp\r\n```\r\n\r\n### Tests\r\n\r\nBase has a suite of tests that runs against a test database. To run the tests, you will need to make sure you have a running instance of a test Postgres db (e.g. postgres://postgres:postgres@localhost:5432/base-test). The settings for this can be entered under the \"TEST\" NODE_ENV section of the config.js file.\r\n\r\nBase uses Mocha + Chai as its test framework.\r\n\r\nOnce this is setup, run the tests by:\r\n\r\n```shell\r\n$ gulp test\r\n```\r\n\r\n## OAuth2\r\n\r\nBase uses Oauth2 as it's authentication framework, and specifically the authorization grant type. It leverages http://passportjs.org to provide authentication strategies to popular social authentication providers, and also to provide api end point protection using token bearer strategies.\r\n\r\nIn order to adhere to the OAuth2 spec,\r\n\r\n> YOU MUST RUN YOUR APP OVER SSL.\r\n\r\nThis is to ensure that protected assets stay protected while in transit. The relevant SSL checks and verifications also need to be in place in order to adhere to the OAuth2 spec. The RFC is a pretty hefty, but detailed resource if you want to go in depth into the requirements for the correct implementation of OAuth2 - https://tools.ietf.org/html/rfc6749\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}